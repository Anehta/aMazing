#include "MazeGenerator.h"


MazeGenerator* MazeGenerator::instance = nullptr;

MazeGenerator::MazeGenerator()
{
}


MazeGenerator::~MazeGenerator()
{
}

MazeGenerator& MazeGenerator::getInstance()
{
	if (instance == nullptr)
	{
		instance = new MazeGenerator;
	}
	return *instance;
}

std::vector<std::vector<int> > MazeGenerator::GenerateWalls(int width, int height)
{
	std::vector<std::vector<int> > walls;
	int i = 0, total = height * width;
	int wall_temp[4] = { 1, 1, 1, 1 };
	std::vector<int> wall(wall_temp, wall_temp + sizeof(wall_temp) / sizeof(int));

	for (; i < total; i++) {
		walls.push_back(wall);
	}

	return walls;
}


Maze* MazeGenerator::genMaze(int dimension)
//get a new Maze generated by MazeGenerator
{
	Maze* output = nullptr;
	output = new Maze;
	if (output == nullptr)
	{
		return nullptr;
	}
	output->width = dimension;
	output->height = dimension;
	output->m_map = new bool[dimension * dimension];
	memset(output->m_map, 0, sizeof(bool)* dimension * dimension);
	output->m_map[output->width * output->height / 4] = true;
	return output;
}